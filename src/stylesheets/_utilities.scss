@use './_variables' as vars;
@use 'sass:map';
@use 'sass:list';

// FONTS

.brand-font {
  font-family: 'Comfortaa', sans-serif;
  font-weight: 300;
}

// DISPLAY

.hidden {
  display: none;
}

@function size-prefix($size) {
  @return #{$size}-;
}

@each $size, $query in vars.$breakpoints {
  @media (#{$query}) {
    .#{size-prefix($size)}hidden {
      display: none;
    }
  }
}

// POSITIONING

.pos-rel {
  position: relative;
}

.pos-abs {
  position: absolute;
}

// FLEX

@mixin gaps($prefix: '') {
  .#{$prefix}gap-none {
    gap: 0;
  }
  .#{$prefix}gap-sm {
    gap: 1rem;
  }

  .#{$prefix}gap-md {
    gap: 2rem;
  }

  .#{$prefix}gap-lg {
    gap: 4rem;
  }
}

@include gaps();

@each $size, $query in vars.$breakpoints {
  @media (#{$query}) {
    @include gaps(size-prefix($size));
  }
}

@mixin flex-parents($prefix: '') {
  .#{$prefix}flex-row {
    display: flex;
  }

  .#{$prefix}flex-column {
    display: flex;
    flex-direction: column;
  }
}

@include flex-parents();

@each $size, $query in vars.$breakpoints {
  @media (#{$query}) {
    @include flex-parents(size-prefix($size));
  }
}

.flex-item {
  flex: 1;
}

.flex-item-2 {
  flex: 2;
}

.flex-item-3 {
  flex: 3;
}

.flex-item-4 {
  flex: 4;
}

.align-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.justify-end {
  justify-content: flex-end;
}

.flex-center {
  align-items: center;
  justify-content: center;
}

.justify-self-center {
  justify-self: center;
}

.align-self-center {
  align-self: center;
}

.align-self-end {
  align-self: flex-end;
}

.row-flex-beyond {
  flex: 1 0 110vw;
  max-width: vars.$max-content-width;
}

@each $size, $query in vars.$breakpoints {
  $prefix: size-prefix($size);
  @media (#{$query}) {
    .#{$prefix}align-self-end {
      align-self: flex-end;
    }
    .#{$prefix}row-flex-beyond {
      flex: 1 0 110vw;
      max-width: vars.$max-content-width;
    }
  }
}

.align-end {
  align-items: flex-end;
}

.space-between {
  justify-content: space-between;
}

.space-around {
  justify-content: space-around;
}

// PADDING & MARGINS

@mixin spacing($prefix: '') {
  @each $space in (vars.$spacing-rems) {
    .#{$prefix}pr-#{$space} {
      padding-right: #{$space}rem;
    }
    .#{$prefix}pl-#{$space} {
      padding-left: #{$space}rem;
    }
    .#{$prefix}pt-#{$space} {
      padding-top: #{$space}rem;
    }
    .#{$prefix}pb-#{$space} {
      padding-bottom: #{$space}rem;
    }
    .#{$prefix}py-#{$space} {
      padding-top: #{$space}rem;
      padding-bottom: #{$space}rem;
    }
    .#{$prefix}px-#{$space} {
      padding-left: #{$space}rem;
      padding-right: #{$space}rem;
    }
    .#{$prefix}p-#{$space} {
      padding: #{$space}rem;
    }
    .#{$prefix}mr-#{$space} {
      margin-right: #{$space}rem;
    }
    .#{$prefix}ml-#{$space} {
      margin-left: #{$space}rem;
    }
    .#{$prefix}mt-#{$space} {
      margin-top: #{$space}rem;
    }
    .#{$prefix}mb-#{$space} {
      margin-bottom: #{$space}rem;
    }
    .#{$prefix}my-#{$space} {
      margin-top: #{$space}rem;
      margin-bottom: #{$space}rem;
    }
    .#{$prefix}mx-#{$space} {
      margin-left: #{$space}rem;
      margin-right: #{$space}rem;
    }
    .#{$prefix}m-#{$space} {
      margin: #{$space}rem;
    }
  }
}

@include spacing();

@each $size, $query in vars.$breakpoints {
  @media (#{$query}) {
    @include spacing(size-prefix($size));
  }
}

.px-half {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}

.pt-half {
  padding-top: 0.5rem;
}

.pr-half {
  padding-right: 0.5rem;
}

// MARGIN

.m-auto {
  margin: auto;
}

.mt-0 {
  margin-top: 0;
}

.mt-4 {
  margin-top: 4rem;
}

.mt-8 {
  margin-top: 8rem;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.my-max {
  margin-top: 8rem;
  margin-bottom: 8rem;
}

.my-auto {
  margin-top: auto;
  margin-bottom: auto;
}

.width-control {
  max-width: vars.$max-content-width;
}

.subgrid {
  grid-template-columns: subgrid;
  grid-template-rows: subgrid;
}

@mixin grid-template-cols($cols, $prefix: '') {
  --#{$prefix}grid-template-columns: repeat(#{$cols}, 1fr);
  grid-template-columns: var(--#{$prefix}grid-template-columns);
}

@mixin grid-col-gaps($rems, $prefix: '') {
  --#{$prefix}grid-col-gaps: #{$rems}rem;
  column-gap: var(--#{$prefix}grid-col-gaps);
}

@mixin grid-template-rows($cols, $prefix) {
  --#{$prefix}grid-template-rows: repeat(#{$cols}, 1fr);
  grid-template-rows: var(--#{$prefix}grid-template-rows);
}

@mixin grid-row-gaps($rems, $prefix: '') {
  --#{$prefix}grid-row-gaps: #{$rems}rem;
  row-gap: var(--#{$prefix}grid-row-gaps);
}

@mixin grid-container-xl {
  display: grid;
  $prefix: 'xl-';
  @include grid-col-gaps(8, $prefix);
  @include grid-row-gaps(8, $prefix);
}

@mixin grid-container-lg {
  display: grid;
  $prefix: 'lg-';
  @include grid-col-gaps(8, $prefix);
  @include grid-row-gaps(8, $prefix);
}

@mixin grid-container-sm {
  display: grid;
  $prefix: 'sm-';
  @include grid-col-gaps(2, $prefix);
  @include grid-row-gaps(2, $prefix);
}

@mixin grid-container-md {
  display: grid;
  $prefix: 'md-';
  @include grid-col-gaps(4, $prefix);
  @include grid-row-gaps(4, $prefix);
}

@mixin grid-container-base($cols, $rows, $prefix) {
  $gap: (
    'xl-': 8,
    'lg-': 8,
    'md-': 4,
    'sm-': 2,
  );
  display: grid;
  @include grid-col-gaps(map.get($gap, $prefix), $prefix);
  @include grid-row-gaps(map.get($gap, $prefix), $prefix);
  @include grid-template-cols($cols, $prefix);
  @include grid-template-rows($rows, $prefix);
}

@mixin thin-column-gap {
  column-gap: 2rem;
}

[class^='gridarea-'] {
  > :first-child {
    margin-top: 0;
  }
}

@function areas($cols, $rows) {
  $col-areas: ();
  @for $row from 0 to $rows {
    $row-areas: '';
    @for $col from 0 to $cols {
      $row-areas: '#{$row-areas area#{calc($col + 1) + calc($cols * $row)}}';
    }
    $col-areas: append($col-areas, $row-areas);
  }
  @return $col-areas;
}

@mixin grids($prefix: '') {
  .#{$prefix}grid-1-1 {
    display: flex;
    flex-direction: column;
    gap: var(--#{$prefix}grid-row-gaps);
  }
  .#{$prefix}grid-1-2 {
    @include grid-container-base(1, 2, $prefix);
    grid-template-areas: areas(1, 2);
    gap: var(--#{$prefix}grid-row-gaps);
  }
  .#{$prefix}grid-1-3 {
    @include grid-container-base(1, 3, $prefix);
    grid-template-areas: areas(1, 3);
    gap: var(--#{$prefix}grid-row-gaps);
  }
  .#{$prefix}grid-1-4 {
    @include grid-container-base(1, 4, $prefix);
    grid-template-areas: areas(1, 4);
    gap: var(--#{$prefix}grid-row-gaps);
  }
  .#{$prefix}grid-2-1 {
    @include grid-container-base(2, 1, $prefix);
    grid-template-areas: areas(2, 1);
    gap: var(--#{$prefix}grid-col-gaps);
  }
  .#{$prefix}grid-2-2 {
    @include grid-container-base(2, 2, $prefix);
    grid-template-areas: areas(2, 2);
  }
  .#{$prefix}grid-2-3 {
    @include grid-container-base(2, 3, $prefix);
    grid-template-areas: areas(2, 3);
  }
  .#{$prefix}grid-2-4 {
    @include grid-container-base(2, 4, $prefix);
    grid-template-areas: areas(2, 4);
  }
  .#{$prefix}grid-2-5 {
    @include grid-container-base(2, 5, $prefix);
    grid-template-areas: areas(2, 5);
  }
  .#{$prefix}grid-3-1 {
    @include grid-container-base(3, 1, $prefix);
    grid-template-areas: areas(3, 1);
    gap: var(--#{$prefix}grid-col-gaps);
  }
  .#{$prefix}grid-3-2 {
    @include grid-container-base(3, 2, $prefix);
    grid-template-areas: areas(3, 2);
  }
  .#{$prefix}grid-3-3 {
    @include grid-container-base(3, 3, $prefix);
    grid-template-areas: areas(3, 3);
  }
  .#{$prefix}grid-3-4 {
    @include grid-container-base(3, 4, $prefix);
    grid-template-areas: areas(3, 4);
  }
  .#{$prefix}grid-4-2 {
    @include grid-container-base(4, 2, $prefix);
    grid-template-areas: areas(4, 2);
  }
  .#{$prefix}grid-4-3 {
    @include grid-container-base(4, 3, $prefix);
    grid-template-areas: areas(4, 2);
  }
  .#{$prefix}grid-5-1 {
    @include grid-container-base(5, 1, $prefix);
    grid-template-areas: areas(5, 1);
    gap: var(--#{$prefix}grid-col-gaps);
  }
  .#{$prefix}grid-5-2 {
    @include grid-container-base(5, 2, $prefix);
    grid-template-areas: areas(5, 2);
  }
  .#{$prefix}cols-40-60 {
    grid-template-columns: auto 60%;
  }
  .#{$prefix}cols-30-70 {
    grid-template-columns: auto 70%;
  }
  .#{$prefix}cols-60-40 {
    grid-template-columns: 60% auto;
  }
  .#{$prefix}cols-70-30 {
    grid-template-columns: 70% auto;
  }
  .#{$prefix}rows-70-30 {
    grid-template-rows: 70% auto;
  }
  .#{$prefix}rows-auto-1-1 {
    grid-template-rows: auto 1fr 1fr;
  }
  .#{$prefix}rows-1-auto {
    grid-template-rows: 1fr auto;
  }
}

// Generate generic grid classes, eg. grid-1-2
@include grids();

// Generate screensize-specific grid classes, eg. md-grid-1-2
@each $size, $query in vars.$breakpoints {
  @media (#{$query}) {
    @include grids(size-prefix($size));
  }
}

@mixin corner-icon($name, $top-or-bottom, $left-or-right) {
  .icon-#{$name} {
    background-image: url('/icons/#{$name}.svg');
    position: absolute;
    #{$top-or-bottom}: 0;
    #{$left-or-right}: 0;
  }
}

@mixin gridarea($area, $prefix: '') {
  .#{$prefix}gridarea-#{$area} {
    grid-area: area#{$area};
    order: #{$area};
  }
}

@mixin gridareas($prefix: '') {
  @for $area from 1 through 12 {
    @include gridarea($area, $prefix);
  }
}

// Generate generic grid area classes, eg. gridarea-1
@include gridareas();

// Generate screensize-specific grid area classes, eg. md-gridarea-1
@each $size, $query in vars.$breakpoints {
  @media (#{$query}) {
    @include gridareas(size-prefix($size));
  }
}

@mixin gridspans($prefix: '') {
  .#{$prefix}col-span-2 {
    grid-column: span 2;
  }

  .#{$prefix}col-span-3 {
    grid-column: span 3;
  }

  .#{$prefix}col-span-4 {
    grid-column: span 4;
  }

  .#{$prefix}col-span-2-3 {
    grid-column: area5 / span 2;
  }

  .#{$prefix}col-span-5-6 {
    grid-column: area5 / span 2;
  }

  .#{$prefix}row-span-2 {
    grid-row: span 2;
  }
  .#{$prefix}row-span-3 {
    grid-row: span 3;
  }
}

// Generate generic col and row span classes, eg. col-span-2
@include gridspans();

// Generate screensize-specific col and row span classes, eg. md-col-span-2
@each $size, $query in vars.$breakpoints {
  @media (#{$query}) {
    @include gridspans(size-prefix($size));
  }
}

.grid-area-center {
  align-self: center;
}

.no-gaps {
  row-gap: 0;
  column-gap: 0;
}

.no-col-gaps {
  column-gap: 0;
}

.no-row-gaps {
  row-gap: 0;
}

.max-content-rows {
  grid-template-rows: max-content;
}

.max-content-cols {
  grid-template-columns: max-content;
}

.no-figure-margins {
  figure {
    margin: 0;
  }
}

.figure-mx-auto {
  figure {
    margin-left: auto;
    margin-right: auto;
  }
}

// TEXT

.text-strong {
  font-weight: 700;
}

.text-no-wrap {
  white-space: nowrap;
}

// COLORS

.color-green {
  color: vars.$green;
}

.blue {
  color: vars.$blue;
}

.color-light {
  color: vars.$light;
}

.opacity-80 {
  opacity: 0.8;
}

.opacity-100 {
  opacity: 1;
}

.box-outline-blue,
.box-outline-green,
.box-fill-white {
  border: 2px solid;
  padding: 0.15rem 0.5rem 0.35rem;
  border-radius: 0.375rem;
  margin-left: 0.25rem;
  margin-right: 0.25rem;
  font-size: 1.1rem;
  font-weight: 400;
}
.box-outline-blue {
  border-color: vars.$blue;
}

.box-outline-green {
  border-color: vars.$green;
}

.box-fill-white {
  background-color: vars.$light;
  color: vars.$dark;
}

// BORDERS

.border-bottom-dark {
  border-bottom: 1px solid rgba(vars.$light, 0.2);
}

// TABLET

@media (min-width: 1201px) {
  .lg-row-span-2 {
    grid-row: span 2;
  }

  .lg-row-span-center {
    align-self: center;
  }
}

.rows-auto {
  grid-template-rows: auto;
}
